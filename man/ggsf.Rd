% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sf.R
\docType{data}
\name{ggsf}
\alias{ggsf}
\alias{StatSf}
\alias{stat_sf}
\alias{GeomSf}
\alias{geom_sf}
\alias{CoordSf}
\alias{coord_sf}
\title{Visualise sf objects}
\format{An object of class \code{StatSf} (inherits from \code{Stat}, \code{ggproto}) of length 3.}
\usage{
StatSf

stat_sf(mapping = NULL, data = NULL, geom = "rect",
  position = "identity", na.rm = FALSE, show.legend = NA,
  inherit.aes = TRUE, ...)

GeomSf

geom_sf(mapping = NULL, data = NULL, stat = "sf", position = "identity",
  na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, ...)

CoordSf

coord_sf(xlim = NULL, ylim = NULL, lat_lon = TRUE, expand = TRUE,
  crs = NULL)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link{aes}} or
\code{\link{aes_}}. If specified and \code{inherit.aes = TRUE} (the
default), it is combined with the default mapping at the top level of the
plot. You must supply \code{mapping} if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three
   options:

   If \code{NULL}, the default, the data is inherited from the plot
   data as specified in the call to \code{\link{ggplot}}.

   A \code{data.frame}, or other object, will override the plot
   data. All objects will be fortified to produce a data frame. See
   \code{\link{fortify}} for which variables will be created.

   A \code{function} will be called with a single argument,
   the plot data. The return value must be a \code{data.frame.}, and
   will be used as the layer data.}

\item{geom}{The geometric object to use display the data}

\item{position}{Position adjustment, either as a string, or the result of
a call to a position adjustment function.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link{borders}}.}

\item{...}{other arguments passed on to \code{\link{layer}}. These are
often aesthetics, used to set an aesthetic to a fixed value, like
\code{color = "red"} or \code{size = 3}. They may also be parameters
to the paired geom/stat.}

\item{stat}{The statistical transformation to use on the data for this
layer, as a string.}

\item{xlim}{Limits for the x and y axes.}

\item{ylim}{Limits for the x and y axes.}

\item{lat_lon}{Does the data represent latitude and longitude?
If \code{TRUE} the aspect ratio will be set so that in the center
of the map, 1 km easting equals 1 km northing.}

\item{expand}{If \code{TRUE}, the default, adds a small expansion factor to
the limits to ensure that data and axes don't overlap. If \code{FALSE},
limits are taken exactly from the data or \code{xlim}/\code{ylim}.}
}
\description{
This set of geom, stat, and coord are used to visualise sf objects.
Generally you will only ever need to use \code{geom_sf}: it will
automatically use \code{stat_sf} and \code{coord_sf} for you.
}
\details{
Each layer needs to use the same CRS. \code{coord_sf} will warn if
they are not all equal, but you will need to fix the problem using
\code{\link[sf]{st_transform}}.
}
\examples{
nc <- sf::st_read(system.file("shape/nc.shp", package = "sf"))
ggplot(nc) +
  geom_sf(aes(geometry = geometry)) +
  coord_sf(crs = sf::st_crs(nc))

nc2 <- sf::st_transform(nc, "+init=epsg:3857")
ggplot(mapping = aes(geometry = geometry)) +
  geom_sf(data = nc) +
  geom_sf(data = nc2)
}
\keyword{datasets}
